@page "/accounts"
@using RiotAccountManager.MAUI.Data.Models
@using RiotAccountManager.MAUI.Data.Repositories
@using RiotAccountManager.MAUI.Services
@inject AccountRepository Repository
@inject RiotClientService RiotClient
@inject EncryptionService Encryptor

<h3>Accounts manager</h3>

<EditForm Model="@newAccount" OnValidSubmit="@AddAccount">
    <div class="form-group">
        <label>Login:</label>
        <InputText @bind-Value="@newAccount.Username" class="form-control" />
    </div>
    <div class="form-group">
        <label>Password:</label>
        <InputText type="password" @bind-Value="@passwordInput" class="form-control" />
    </div>
    <div class="form-group">
        <label>Nickname and tag (optional):</label>
        <InputText @bind-Value="@newAccount.Nickname" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Add account</button>
</EditForm>

<table class="table">
    <thead>
    <tr>
        <th>Login</th>
        <th>Nickname</th>
        <th>Action</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var acc in accounts)
    {
        <tr>
            <td>@acc.Username</td>
            <td>@acc.Nickname</td>
            <td>
                <button @onclick="@(() => Login(acc))" class="btn btn-success">Login</button>
                <button class="btn btn-primary">Edit</button>
                <button @onclick="@(() => Remove(acc))" class="btn btn-danger">Remove</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private static IComponentRenderMode pageRenderMode = new InteractiveServerRenderMode(); // bo zjebany blazor wyłącza interakcje domyślnie
    
    private List<Account> accounts = new();
    private Account newAccount = new();
    private string passwordInput;

    protected override void OnInitialized()
    {
        accounts = Repository.GetAll();
    }

    private void AddAccount()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(passwordInput))
            {
                newAccount.EncryptedPassword = Encryptor.Encrypt(passwordInput);
                accounts.Add(newAccount);
                Repository.SaveAll(accounts);
                StateHasChanged();
                
                passwordInput = string.Empty;
                newAccount = new Account();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd dodawania konta: {ex.Message}");
        }
    }

    private async Task Login(Account account)
    {
        var success = await RiotClient.AutoLogin(account);
    }

    private void Remove(Account account)
    {
        try
        {
            accounts.Remove(account);
            Repository.SaveAll(accounts);
            StateHasChanged();

            if (account.EncryptedPassword != null)
            {
                Array.Clear(account.EncryptedPassword, 0, account.EncryptedPassword.Length);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd usuwania konta: {ex.Message}");
        }
    }
}