@page "/accountDetails/{username}"
@using RiotAccountManager.MAUI.Data.Models
@using RiotAccountManager.MAUI.Data.Repositories
@using RiotAccountManager.MAUI.Helpers
@using RiotAccountManager.MAUI.Services.LcuService
@inject AccountRepository AccountRepository
@inject ILcuService LcuService
@inject NavigationManager NavigationManager


<div class="app-container">
    <header class="app-header">
        <button class="icon-button" @onclick="ReturnToMain">
            <i class="fas fa-arrow-left"></i>
        </button>
        <h1 class="app-title">@_account?.Nickname</h1>
    </header>

    @if (_account != null)
    {
        <div class="account-layout">
            <div class="rank-sidebar">
                @if (_rankedEntry != null)
                {
                    <div class="rank-card">
                        <div class="queue-type">RANKED SOLO/DUO</div>
                        <div class="rank-main">
                            <img src="@GetRankImagePath(_rankedEntry.Tier)" class="rank-icon" />
                            <div class="rank-details">
                                <div class="tier-info">
                                    <span class="tier-name">@_rankedEntry.Tier.ToUpper()</span>
                                    <span class="division">@_rankedEntry.Division</span>
                                </div>
                                <div class="lp">@_rankedEntry.LeaguePoints LP</div>
                                <div class="wlr">
                                    <span class="wins">@_rankedEntry.Wins W</span>
                                    <span class="losses">@_rankedEntry.Losses L</span>
                                    <span class="win-rate">(@_rankedEntry.WinRatio)</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (_flexEntry != null)
                {
                    <div class="rank-card">
                        <div class="queue-type">RANKED FLEX</div>
                        <div class="rank-main">
                            <img src="@GetRankImagePath(_flexEntry.Tier)" class="rank-icon" />
                            <div class="rank-details">
                                <div class="tier-info">
                                    <span class="tier-name">@_flexEntry.Tier.ToUpper()</span>
                                    <span class="division">@_flexEntry.Division</span>
                                </div>
                                <div class="lp">@_flexEntry.LeaguePoints LP</div>
                                <div class="wlr">
                                    <span class="wins">@_flexEntry.Wins W</span>
                                    <span class="losses">@_flexEntry.Losses L</span>
                                    <span class="win-rate">(@_flexEntry.WinRatio)</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <div class="match-history">
                <h2 class="section-title">
                    <i class="fas fa-history"></i>
                    Match History
                </h2>

                <div class="match-list">
                    @foreach (var match in _matches)
                    {
                        <div class="match-item @(match.IsWin ? "win" : "lose")">
                            <div class="match-result-bar"></div>
                            <div class="match-info">
                                <div class="champion">
                                    <img src="img/champions/@(match.Champion).png" class="champion-icon" />
                                    <span class="champion-level">@match.ChampionLevel</span>
                                </div>
                                <div class="match-stats">
                                    <div class="kda">
                                        <span class="kills">@match.Kills</span> /
                                        <span class="deaths">@match.Deaths</span> /
                                        <span class="assists">@match.Assists</span>
                                    </div>
                                    <div class="additional-stats">
                                        <span class="cs">@match.CS CS</span>
                                        <span class="vision">@match.VisionScore Vision</span>
                                    </div>
                                </div>
                                <div class="items">
                                    @foreach (var item in match.Items)
                                    {
                                        <img src="img/items/@(item).png" class="item-icon" />
                                    }
                                </div>
                                <div class="game-info">
                                    <span class="game-duration">@match.Duration</span>
                                    <span class="game-type">@match.GameType</span>
                                    <span class="game-result">@(match.IsWin ? "Victory" : "Defeat")</span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="not-found">
            <i class="fas fa-user-slash"></i>
            <p>Account not found</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Username { get; set; }

    private Account? _account;
    private RankedEntryDto? _rankedEntry;
    private RankedEntryDto? _flexEntry;
    private WalletDto? _wallet;
    private bool _isClientRunning = false;
    private Timer _refreshTimer;

    private List<MatchHistoryItem> _matches = new()
    {
        new MatchHistoryItem
        {
            IsWin = true,
            Champion = "Jinx",
            ChampionLevel = 7,
            Kills = 8,
            Deaths = 2,
            Assists = 14,
            CS = 278,
            VisionScore = 25,
            Items = new[] { 6671, 6672, 6673, 6674, 6675, 6676 },
            Duration = "32:15",
            GameType = "Ranked Solo"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        _account = AccountRepository.GetAll().FirstOrDefault(a => a.Username == Username);

        await CheckClientStatusAsync();
        await FetchWalletData();

        if (_isClientRunning)
        {
            _refreshTimer = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await FetchRankedData();
                    StateHasChanged();
                });
            }, null, 0, 10000);
        }
    }

    private async Task CheckClientStatusAsync()
    {
        var stats = await LcuService.GetAsync<CurrentRankedStatsDto>("/lol-ranked/v1/current-ranked-stats");
        _isClientRunning = stats != null;

        if (_isClientRunning)
        {
            _rankedEntry = stats?.HighestRankedEntry;
        }
    }

    private async Task FetchRankedData()
    {
        var stats = await LcuService.GetAsync<CurrentRankedStatsDto>("/lol-ranked/v1/current-ranked-stats");
        if (stats != null)
        {
            _isClientRunning = true;
            _rankedEntry = stats.HighestRankedEntry;

            if (stats.QueueMap != null && stats.QueueMap.ContainsKey("RANKED_FLEX_SR"))
            {
                _flexEntry = stats.QueueMap["RANKED_FLEX_SR"];
            }
            else
            {
                _flexEntry = null;
            }
        }
        else
        {
            _isClientRunning = false;
            _rankedEntry = null;
            _flexEntry = null;
        }
    }

    private async Task FetchWalletData()
    {
        _wallet = await LcuService.GetAsync<WalletDto>("/lol-inventory/v1/wallet?currencyTypes=[\"RP\",\"lol_blue_essence\"]");
    }
    
    private void ReturnToMain()
    {
        NavigationManager.NavigateTo("/");
    }

    private string GetRankImagePath(string tier)
    {
        if (string.IsNullOrWhiteSpace(tier))
            return string.Empty;

        var normalizedTier = tier.ToLower().Replace(" ", "");
        var imageName = $"rank_{normalizedTier}.png";
        return FileHelpers.AppPackageFileExists(imageName) ? $"/{imageName}" : string.Empty;
    }
} 