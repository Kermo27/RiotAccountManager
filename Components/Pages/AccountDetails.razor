@page "/accountDetails/{username}"
@using RiotAccountManager.MAUI.Data.Models
@using RiotAccountManager.MAUI.Data.Repositories
@using RiotAccountManager.MAUI.Helpers
@using RiotAccountManager.MAUI.Services.LcuService
@using RiotAccountManager.MAUI.Services.MatchHistoryService
@inject AccountRepository AccountRepository
@inject ILcuService LcuService
@inject NavigationManager NavigationManager
@inject IMatchHistoryService MatchHistoryService


<div class="app-container">
    <header class="app-header">
        <button class="icon-button" @onclick="ReturnToMain">
            <i class="fas fa-arrow-left"></i>
        </button>
        <h1 class="app-title">@_account?.Nickname</h1>
    </header>

    @if (_account != null)
    {
        <div class="account-layout">
            <div class="rank-sidebar">
                <!-- Sekcja ranków pozostaje bez zmian -->
            </div>

            <div class="match-history">
                <h2 class="section-title">
                    <i class="fas fa-history"></i>
                    Match History
                </h2>

                @if (_isLoading)
                {
                    <div class="loading-overlay">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                    </div>
                }

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="error-message">
                        @_errorMessage
                    </div>
                }

                @if (_matches.Any())
                {
                    <div class="match-list">
                        @foreach (var match in _matches)
                        {
                            <div class="match-item @(match.Win ? "win" : "lose")">
                                <div class="match-result-bar"></div>
                                <div class="match-info">
                                    <div class="champion">
                                        <img src="https://ddragon.leagueoflegends.com/cdn/15.5.1/img/champion/@(match.ChampionName).png"
                                             class="champion-icon"
                                             alt="@match.ChampionName" />
                                    </div>
                                    <div class="match-stats">
                                        <div class="kda">
                                            <span class="kills">@match.Kills</span> /
                                            <span class="deaths">@match.Deaths</span> /
                                            <span class="assists">@match.Assists</span>
                                        </div>
                                        <div class="additional-stats">
                                            <span>@match.TotalDamageDealt damage</span>
                                            <span>@match.VisionScore vision</span>
                                        </div>
                                    </div>
                                    <div class="items">
                                        <!-- Przedmioty możesz dodać później -->
                                    </div>
                                    <div class="game-info">
                                        <span class="game-duration">@match.GameDuration.ToString(@"mm\:ss")</span>
                                        <span class="game-type">@match.QueueType</span>
                                        <span class="game-result">@(match.Win ? "Victory" : "Defeat")</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="not-found">
            <i class="fas fa-user-slash"></i>
            <p>Account not found</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Username { get; set; }

    private Account? _account;
    private RankedEntryDto? _rankedEntry;
    private RankedEntryDto? _flexEntry;
    private WalletDto? _wallet;
    private bool _isClientRunning = false;
    private Timer _refreshTimer;
    private List<MatchDto> _matches = new();
    private bool _isLoading;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _account = AccountRepository.GetAll().FirstOrDefault(a => a.Username == Username);

        await CheckClientStatusAsync();
        await FetchWalletData();
        await LoadMatches();

        if (_isClientRunning)
        {
            _refreshTimer = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await FetchRankedData();
                    StateHasChanged();
                });
            }, null, 0, 10000);
        }
    }

    private async Task CheckClientStatusAsync()
    {
        var stats = await LcuService.GetAsync<CurrentRankedStatsDto>("/lol-ranked/v1/current-ranked-stats");
        _isClientRunning = stats != null;

        if (_isClientRunning)
        {
            _rankedEntry = stats?.HighestRankedEntry;
        }
    }

    private async Task FetchRankedData()
    {
        var stats = await LcuService.GetAsync<CurrentRankedStatsDto>("/lol-ranked/v1/current-ranked-stats");
        if (stats != null)
        {
            _isClientRunning = true;
            _rankedEntry = stats.HighestRankedEntry;

            if (stats.QueueMap != null && stats.QueueMap.ContainsKey("RANKED_FLEX_SR"))
            {
                _flexEntry = stats.QueueMap["RANKED_FLEX_SR"];
            }
            else
            {
                _flexEntry = null;
            }
        }
        else
        {
            _isClientRunning = false;
            _rankedEntry = null;
            _flexEntry = null;
        }
    }

    private async Task FetchWalletData()
    {
        _wallet = await LcuService.GetAsync<WalletDto>("/lol-inventory/v1/wallet?currencyTypes=[\"RP\",\"lol_blue_essence\"]");
    }
    
    private void ReturnToMain()
    {
        NavigationManager.NavigateTo("/");
    }

    private string GetRankImagePath(string tier)
    {
        if (string.IsNullOrWhiteSpace(tier))
            return string.Empty;

        var normalizedTier = tier.ToLower().Replace(" ", "");
        var imageName = $"rank_{normalizedTier}.png";
        return FileHelpers.AppPackageFileExists(imageName) ? $"/{imageName}" : string.Empty;
    }
    
    private async Task LoadMatches()
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;
            
            var soloMatches = await MatchHistoryService.GetRankedMatchesAsync(
                _account.Region, 
                _account.Nickname, 
                "SOLO"
            );
            
            var flexMatches = await MatchHistoryService.GetRankedMatchesAsync(
                _account.Region, 
                _account.Nickname, 
                "FLEX"
            );

            _matches = soloMatches
                .Concat(flexMatches)
                .OrderByDescending(m => m.GameCreation)
                .ToList();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading matches: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }
} 