@page "/accountDetails/{username}"
@using RiotAccountManager.MAUI.Data.Models
@using RiotAccountManager.MAUI.Data.Repositories
@using RiotAccountManager.MAUI.Services.LcuService
@inject AccountRepository AccountRepository
@inject ILcuService LcuService
@inject NavigationManager NavigationManager

<div class="app-container">
    <!-- Nagłówek -->
    <header class="app-header">
        <button class="icon-button" @onclick="ReturnToMain">
            <svg viewBox="0 0 24 24" width="24" height="24">
                <path fill="currentColor" d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z"/>
            </svg>
        </button>
        <h1 class="app-title">Account Details</h1>
        <div style="width: 40px;"></div>
    </header>

    @if (_account != null)
    {
        <div class="account-details">
            <div class="account-info-section">
                <div class="detail-item">
                    <span class="detail-label">Login:</span>
                    <span class="detail-value">@_account.Username</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Nickname:</span>
                    <span class="detail-value">@_account.Nickname</span>
                </div>
                @if (_region != null)
                {
                    <div class="detail-item">
                        <span class="detail-label">Region:</span>
                        <span class="detail-value region-badge">@_region.Region</span>
                    </div>
                }
            </div>

            @if (!_isClientRunning)
            {
                <div class="warning-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>League of Legends client is not running</span>
                </div>
            }

            <button class="primary-btn fetch-btn" @onclick="FetchRankedData">
                <i class="fas fa-sync-alt"></i>
                Refresh Data
            </button>

            @if (_rankedEntry != null)
            {
                <div class="ranked-section">
                    <h3 class="section-title">
                        <i class="fas fa-trophy"></i>
                        Ranked Solo/Duo
                    </h3>
                    <div class="ranked-grid">
                        <div class="ranked-item">
                            <span>Tier</span>
                            <strong>@_rankedEntry.Tier</strong>
                        </div>
                        <div class="ranked-item">
                            <span>Division</span>
                            <strong>@_rankedEntry.Division</strong>
                        </div>
                        <div class="ranked-item">
                            <span>LP</span>
                            <strong>@_rankedEntry.LeaguePoints</strong>
                        </div>
                        <div class="ranked-item">
                            <span>Wins</span>
                            <strong>@_rankedEntry.Wins</strong>
                        </div>
                        <div class="ranked-item">
                            <span>Losses</span>
                            <strong>@_rankedEntry.Losses</strong>
                        </div>
                        <div class="ranked-item">
                            <span>Win Ratio</span>
                            <strong>@_rankedEntry.WinRatio%</strong>
                        </div>
                    </div>
                </div>
            }

            @if (_flexEntry != null)
            {
                <div class="ranked-section">
                    <h3 class="section-title">
                        <i class="fas fa-users"></i>
                        Ranked Flex
                    </h3>
                    <div class="ranked-grid">
                        <div class="ranked-item">
                            <span>Tier</span>
                            <strong>@_flexEntry.Tier</strong>
                        </div>
                        <div class="ranked-item">
                            <span>Division</span>
                            <strong>@_flexEntry.Division</strong>
                        </div>
                        <div class="ranked-item">
                            <span>LP</span>
                            <strong>@_flexEntry.LeaguePoints</strong>
                        </div>
                        <div class="ranked-item">
                            <span>Wins</span>
                            <strong>@_flexEntry.Wins</strong>
                        </div>
                        <div class="ranked-item">
                            <span>Losses</span>
                            <strong>@_flexEntry.Losses</strong>
                        </div>
                        <div class="ranked-item">
                            <span>Win Ratio</span>
                            <strong>@_flexEntry.WinRatio%</strong>
                        </div>
                    </div>
                </div>
            }

            @if (_wallet != null)
            {
                <div class="wallet-section">
                    <h3 class="section-title">
                        <i class="fas fa-wallet"></i>
                        Wallet
                    </h3>
                    <div class="wallet-grid">
                        <div class="wallet-item be">
                            <span>Blue Essence</span>
                            <strong>@_wallet.LolBlueEssence</strong>
                        </div>
                        <div class="wallet-item rp">
                            <span>Riot Points</span>
                            <strong>@_wallet.Rp</strong>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="not-found">
            <i class="fas fa-user-slash"></i>
            <p>Account not found</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Username { get; set; }

    private Account? _account;
    private RankedEntryDto? _rankedEntry;
    private RankedEntryDto? _flexEntry;
    private WalletDto? _wallet;
    private RegionDto? _region;
    private bool _isClientRunning = false;
    private Timer _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        _account = AccountRepository.GetAll().FirstOrDefault(a => a.Username == Username);

        await CheckClientStatusAsync();

        if (_isClientRunning)
        {
            _refreshTimer = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await FetchRankedData();
                    StateHasChanged();
                });
            }, null, 0, 10000);
        }
    }

    private async Task CheckClientStatusAsync()
    {
        var stats = await LcuService.GetAsync<CurrentRankedStatsDto>("/lol-ranked/v1/current-ranked-stats");
        _isClientRunning = stats != null;

        if (_isClientRunning)
        {
            _rankedEntry = stats?.HighestRankedEntry;
        }
    }

    private async Task FetchRankedData()
    {
        var stats = await LcuService.GetAsync<CurrentRankedStatsDto>("/lol-ranked/v1/current-ranked-stats");
        if (stats != null)
        {
            _isClientRunning = true;
            _rankedEntry = stats.HighestRankedEntry;

            if (stats.QueueMap != null && stats.QueueMap.ContainsKey("RANKED_FLEX_SR"))
            {
                _flexEntry = stats.QueueMap["RANKED_FLEX_SR"];
            }
            else
            {
                _flexEntry = null;
            }
        }
        else
        {
            _isClientRunning = false;
            _rankedEntry = null;
            _flexEntry = null;
        }

        FetchWalletData();
        FetchRegionLocale();
    }

    private async Task FetchWalletData()
    {
        _wallet = await LcuService.GetAsync<WalletDto>("/lol-inventory/v1/wallet?currencyTypes=[\"RP\",\"lol_blue_essence\"]");
    }

    private async Task FetchRegionLocale()
    {
        _region = await LcuService.GetAsync<RegionDto>("/riotclient/region-locale");
    }
    
    private void ReturnToMain()
    {
        NavigationManager.NavigateTo("/");
    }
}